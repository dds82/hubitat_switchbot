/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.6 - @tomw - Added Humidifier support.  See this page for setMode values: https://github.com/OpenWonderLabs/SwitchBotAPI#command-set-for-physical-devices
0.9.5 - @tomw - Swallow unknown API replies instead of using "unknown".
0.9.4 - @tomw - Add SwitchLevel (dimmer) functionality for ease-of-use.  setLevel functions as an alias for setPosition.
0.9.2 - @tomw - More Curtain debugging.
0.9.1 - @tomw - Updated Curtain driver after debugging.  Thanks @dadarkgtprince for testing and feedback.
0.9.0 - @tomw - Initial release.

*/

metadata
{
    definition(name: "SwitchBot Humidifier", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Initialize"
        capability "Refresh"
        capability "RelativeHumidityMeasurement"
        capability "RelaySwitch"
        capability "Switch"
        capability "TemperatureMeasurement"
        
        command "setMode", [[name: "parameter (0..100 or auto)*", type: "STRING"]]
        
        attribute "auto", "string"
        attribute "childLock", "string"
        attribute "nebulizationEfficiency", "number"
        attribute "sound", "string"
    }
}

preferences
{
    section
    {
        input "degC", "bool", title: "Use degrees C? (Off for Degrees F)", defaultValue: true
    }
}

def initialize()
{
    sendEvent(name: "auto", value: "unknown")
    sendEvent(name: "childLock", value: "unknown")
    sendEvent(name: "humidity", value: "unknown")
    sendEvent(name: "nebulizationEfficiency", value: "unknown")
    sendEvent(name: "sound", value: "unknown")
    sendEvent(name: "switch", value: "unknown")
    sendEvent(name: "temperature", value: "unknown")
    
    refresh()
}

def refresh()
{
    unschedule(refresh)
    
    try
    {
        def id = getParent()?.getId(device.getDeviceNetworkId())
        def respData = getParent()?.readDeviceStatus(id)
        
        if(!respData)
        {
            return
        }
        
        if(respData.body?.auto)
        {
            sendEvent(name: "auto", value: respData.body.auto.toString())
        }
        
        if(respData.body?.childLock)
        {
            sendEvent(name: "childLock", value: respData.body.childLock.toString())
        }
        
        if(respData.body?.humidity)
        {
            sendEvent(name: "humidity", value: respData.body.humidity.toInteger())
        }
        
        if(respData.body?.nebulizationEfficiency)
        {
            sendEvent(name: "nebulizationEfficiency", value: respData.body.nebulizationEfficiency.toInteger())
        }
        
        if(respData.body?.sound)
        {
            sendEvent(name: "sound", value: respData.body.sound.toString())
        }
        
        if(respData.body?.power)
        {
            sendEvent(name: "switch", value: respData.body.power.toString())
        }
        
        if(respData.body?.temperature)
        {
            def tempVal = degC ? respData.body.temperature.toDouble() : celsiusToFahrenheit(respData.body.temperature.toDouble())
            sendEvent(name: "temperature", value: tempVal?.toDouble())
        }
    }
    catch (Exception e)
    {
        log.debug "refresh() failed: ${e.message}"
    }
}

def on()
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, "turnOn", "default", "command")
        runIn(2, refresh)
    }
}

def off()
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, "turnOff", "default", "command")
        runIn(2, refresh)
    }
}

def setMode(mode)
{
    // valid mode values are 0..103 and "auto"
    if(mode?.isInteger())
    {
        def modeInt = mode.toInteger()
        if(modeInt < 0 || modeInt > 103)
        {
            log.debug "setMode(): unsupported mode value"
            return
        }
    }
    else if("auto" != mode)
    {
        log.debug "setMode(): unsupported mode value"
        return
    }
    
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, "setMode", mode.toString(), "command")
        runIn(2, refresh)
    }    
}

def readDeviceDetails(details) {
}
