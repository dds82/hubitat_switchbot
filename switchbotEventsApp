/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.21 - tomw -
    Added temperature and humidity support for Hub 2 (as SwitchBot Meter child).
    Added Indoor/Outdoor Thermo-Hygrometer (in SwitchBot Meter driver).
0.9.15 - tomw - Added Plug Mini support.
0.9.14 - tomw - API v1.1 support.
0.9.13 - tomw - Added Contact Sensor and Motion Sensor support.
0.9.12 - tomw - Added Smart Lock and webhook events support.
0.9.0  - tomw - Initial release.

*/

definition(name: "SwitchBot Events", namespace: "tomw", author: "tomw",
    description: "", category: "Convenience",
    iconUrl: "", iconX2Url: "", iconX3Url: "")

preferences
{
    page(name: "mainPage")
}

def mainPage()
{
    dynamicPage(name: "mainPage", title: "", install: true, uninstall: true)
    {
        enableOauth()
        getToken()
        
        section
        {
            input name:	"systemDev", type: "device.SwitchBotSystem", title: "Select your SwitchBot System device.", multiple: false, required: true
            input name: "enableLogging", type: "bool", title: "Enable debug logging?", defaultValue: true, required: false
        }
    }
}

def logDebug(msg)
{
    if(enableLogging)
    {
        log.debug "${msg}"
    }
}

def updated()
{
    uninstalled()
    installed()
}

def params(op)
{
    if(!["setupWebhook", "deleteWebhook", "queryWebhook"].contains(op))
    {
        return
    }
    
    systemDev.cacheHttpParams()
    
    // this is stored as a Json string
    def params = new groovy.json.JsonSlurper().parseText(systemDev.getDataValue("params"))
    
    params.uri += "webhook/${op}"
    
    def body =
        [
            action: op,
            url: getFullApiServerUrl() + "/events/?access_token=${token}",
            deviceList: "ALL"
        ]
    
    if("setupWebhook" == op)
    {
        body['deviceList'] = "ALL"
    }
    
    if("queryWebhook" == op)
    {
        body = [action: "queryUrl"]
    }
    
    params.body = groovy.json.JsonOutput.toJson(body)
    
    return params
}

def installed()
{
    httpPostJson(params("setupWebhook")) { resp-> logDebug(resp.data) }
}

def uninstalled()
{
    httpPostJson(params("deleteWebhook")) { resp-> logDebug(resp.data) }  
}

private void enableOauth()
{
    // Thanks! - https://github.com/imnotbob/autoMower/blob/main/automower-connect.groovy
    Map params=
        [
            uri: "http://localhost:8080/app/edit/update?_action_update=Update&oauthEnabled=true&id=${app.appTypeId}".toString(),
            headers: ['Content-Type':'text/html;charset=utf-8']
        ]
    try
    {
        httpPost(params) {}
    }
    catch (e) {}
}

def getToken()
{
    if(!state.accessToken)
    {
        createAccessToken()
    }
    
    return state.accessToken
}

mappings
{
    path("/events")
    {
        action:
            [
                POST: "observeEvent",
            ]
    }
}

def observeEvent()
{
    //logDebug("observedEvent: ${request.JSON}")    
    processEvent(request.JSON)
}

def processEvent(eventMap)
{
    if(!eventMap) { return }
    
    logDebug("incoming event: ${eventMap}")
    
    if("changeReport" != eventMap?.eventType) { return }
    
    // check whether we know about this type of device
    def devTypeInfo = deviceTypesMap.getAt(eventMap.context.deviceType)    
    if(!devTypeInfo) { return }
    
    // build the event that we'll pass to the driver
    def newEvent = [:]
    
    // include common attributes...
    def attrsMap = allDevsAttrs
    // ...plus any device-specific ones that differ between events and polled refreshes
    if(devTypeInfo.attrs) { attrsMap += devTypeInfo.attrs }
    
    // actually re-map as needed
    eventMap?.context?.keySet().each
    {
        key ->
        newEvent.put(attrsMap?.getAt(key) ?: key, eventMap.context[key])
    }
    
    // save device type for the driver to vector off of    
    newEvent.put("deviceType", devTypeInfo.name)
    
    logDebug("processed event: ${newEvent}")
    
    systemDev.parse(newEvent)
}

import groovy.transform.Field

@Field deviceTypesMap =
    [
        WoContact: [name: "Contact Sensor", attrs: contactSensorAttrsMap],
        WoLock: [name: "Smart Lock"],
        WoMeter: [name: "Meter"],
        WoMeterPlus: [name: "Meter"],
        WoHub2: [name: "Meter"],
        WoIOSensor: [name: "Meter"],
        WoPlugJP: [name: "Plug Mini", attrs: commonSwitchAttrsMap], 
        WoPlugUS: [name: "Plug Mini", attrs: commonSwitchAttrsMap], 
        WoPresence: [name: "Motion Sensor", attrs: motionSensorAttrsMap],
        WoStrip: [name: "Strip Light", attrs: commonSwitchAttrsMap],
        WoKeypadTouch: [name: "Keypad Touch"],
    ]

static @Field allDevsAttrs = 
    [
        deviceMac: "deviceId"
    ]

static @Field commonSwitchAttrsMap = 
    [
        powerState: "power"
    ]

static @Field contactSensorAttrsMap =
    [
        detectionState: "openState"
    ]

static @Field motionSensorAttrsMap =
    [
        detectionState: "moveDetected"
    ]


