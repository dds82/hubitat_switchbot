/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.18 - tomw - Added Color Bulb support (in SwitchBot Strip Light driver).
0.9.13 - tomw - Added Contact Sensor and Motion Sensor support.
0.9.12 - tomw - Added Smart Lock and webhook events support.
0.9.11 - tomw - Added Strip Light support.

*/

metadata
{
    definition(name: "SwitchBot Strip Light", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Bulb"
        capability "ColorControl"
        capability "ColorMode"
        capability "ColorTemperature"
        capability "Initialize"
        capability "Refresh"
        capability "RelaySwitch"
        capability "Switch"
        capability "SwitchLevel"
    }
}

def initialize()
{    
    refresh()
}

def refresh()
{
    parent?.refreshFromParent(device)
}

def parse(body)
{
    if(!body) { return }
    
    sendEvent(name: "level", value: body.brightness?.toInteger())
    sendEvent(name: "switch", value: body.power?.toString()?.toLowerCase())
    
    def colorMode = (body.color == "0:0:0") ? "CT" : (body.colorTemperature?.toInteger() < 2000) ? "RGB" : null
    sendEvent(name: "colorMode", value: colorMode)
    
    def rgb = body.color?.split(':')
    
    if(3 == rgb.size() && colorMode == "RGB")
    {
        def cRGB = [rgb[0].toInteger(), rgb[1].toInteger(), rgb[2].toInteger()]
        def cHSV = hubitat.helper.ColorUtils.rgbToHSV(cRGB)
        
        sendEvent(name: "hue", value: cHSV[0].toInteger())
        
        // use 'real' hue [0..360]        
        def hue360 = (cHSV[0] * 360 / 100).toFloat().round().toInteger()
        def colorName = hueToColor(hue360)
        sendEvent(name: "colorName", value: colorName)

        sendEvent(name: "saturation", value: cHSV[1]?.toInteger())        
        sendEvent(name: "color", value: [hue: cHSV[0]?.toInteger(), saturation: cHSV[1]?.toInteger(), level: cHSV[2]?.toInteger()])        
        sendEvent(name: "RGB", value: [red: cRGB[0], green: cRGB[1], blue: cRGB[2]])
    }
    
    if(null != body.colorTemperature && colorMode == "CT")
    {
        sendEvent(name: "colorTemperature", value: body.colorTemperature.toInteger())
        sendEvent(name: "colorName", value: tempToColor(body.colorTemperature))
    }
}

def writeDeviceCommand(command, parameter = "default", commandType = "command")
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, command, parameter, commandType)
        runIn(2, refresh)
        
        switch(respData?.statusCode?.toInteger())
        {
            case 160:
                log.error "setColorTemperature() is not supported for this device type"
                return false
            case 100:
                return true
        }
    }
}

def on()
{
    writeDeviceCommand("turnOn")
}

def off()
{
    writeDeviceCommand("turnOff")
}

def setLevel(level, duration = 0)
{
    level = (level < 0) ? ((level > 100) ? 100 : level) : level
    writeDeviceCommand("setBrightness", level)
}

def setColor(colormap)
{
    def cRGB = hubitat.helper.ColorUtils.hsvToRGB([colormap.hue, colormap.saturation, colormap.level])
    writeDeviceCommand("setColor", "${cRGB[0].toInteger()}:${cRGB[1].toInteger()}:${cRGB[2].toInteger()}")
}

def setColorTemperature(colortemp, level = null, transitionTime = null)
{
    colortemp = colortemp.toInteger()
    
    if(colortemp < 2200 || colortemp > 7000)
    {
        return
    }
    
    if(writeDeviceCommand("setColorTemperature", colortemp))
    {
        level = (null != level) ? level : device.currentValue("level")
        setLevel(level)
    }
}

def getRgbMap()
{
    def RGB = device.currentValue("RGB")
    if(null == RGB)
    {
        return
    }
    
    def rgbMap = [:]
    for(color in RGB.replace("{","").replace("}","").split(", "))
    {
        def splitColor = color.split("=")
        rgbMap[splitColor[0]] = splitColor[1]
    }
    
    return rgbMap
}

def setHue(hue)
{  
    def rgbMap = getRgbMap()
    if(null == rgbMap)
    {
        return
    }
    
    def cHSV = hubitat.helper.ColorUtils.rgbToHSV([rgbMap.red.toInteger(), rgbMap.green.toInteger(), rgbMap.blue.toInteger()])
    
    setColor(['hue': hue, 'saturation': cHSV[1], 'level': cHSV[2]])
}

def setSaturation(saturation)
{
    def rgbMap = getRgbMap()
    if(null == rgbMap)
    {
        return
    }
    
    def cHSV = hubitat.helper.ColorUtils.rgbToHSV([rgbMap.red.toInteger(), rgbMap.green.toInteger(), rgbMap.blue.toInteger()])
    
    setColor(['hue': cHSV[0], 'saturation': saturation, 'level': cHSV[2]])
}

/*
    Color-related utility functions below this point
        referenced from Hubitat sample drivers: https://raw.githubusercontent.com/hubitat/HubitatPublic/master/examples/drivers/GenericZigbeeRGBWBulb.groovy
*/

def hueToColor(hue)
{
    // use 'real' hue [0..360]
    def colorName = "unknown"
    
    switch (hue.toInteger())
    {
		case 0..15:
			colorName = "Red"
			break
		case 16..45:
			colorName = "Orange"
			break
		case 46..75:
			colorName = "Yellow"
			break
		case 76..105:
			colorName = "Chartreuse"
			break
		case 106..135:
			colorName = "Green"
			break
		case 136..165:
			colorName = "Spring"
			break
		case 166..195:
			colorName = "Cyan"
			break
		case 196..225:
			colorName = "Azure"
			break
		case 226..255:
			colorName = "Blue"
			break
		case 256..285:
			colorName = "Violet"
			break
		case 286..315:
			colorName = "Magenta"
			break
		case 316..345:
			colorName = "Rose"
			break
		case 346..360:
			colorName = "Red"
			break
    }
    
    return colorName
}

def tempToColor(temp)
{
    if (!temp) { return }
    
    def genericName = "unknown"
    
    def value = temp.toInteger()
    if (value <= 2000) genericName = "Sodium"
    else if (value <= 2100) genericName = "Starlight"
    else if (value < 2400) genericName = "Sunrise"
    else if (value < 2800) genericName = "Incandescent"
    else if (value < 3300) genericName = "Soft White"
    else if (value < 3500) genericName = "Warm White"
    else if (value < 4150) genericName = "Moonlight"
    else if (value <= 5000) genericName = "Horizon"
    else if (value < 5500) genericName = "Daylight"
    else if (value < 6000) genericName = "Electronic"
    else if (value <= 6500) genericName = "Skylight"
    else if (value < 20000) genericName = "Polar"
        
    return genericName
}
