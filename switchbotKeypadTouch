/*

Copyright 2024 - dsegall

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.22 dsegall Added Keypad Touch

*/

import groovy.json.JsonBuilder

@Field static final String PERMANENT = "permanent"
@Field static final String TIMED = "timeLimit"
@Field static final String DISPOSABLE = "disposable"
@Field static final String EMERGENCY = "urgent"

@Field static final String SUCCESS = "success"
@Field static final String FAILED = "failed"
@Field static final String TIMEOUT = "timeout"

@Field static final String PASSCODE_NORMAL = "normal"
@Field static final String PASSCODE_EXPIRED = "expired"

metadata
{
    definition(name: "SwitchBot Keypad Touch", namespace: "tomw", author: "dsegall", importUrl: "")
    {
        capability "Refresh"
        capability "LockCodes"

        command "createKey", [[name: "ID*", type: "STRING"], [name: "Password*", type: "STRING"], [name: "Type", type: "ENUM", constraints: [PERMANENT, TIMED, DISPOSABLE, EMERGENCY]], [name: "Start Time", type: "NUMBER"], [name: "End Time", type: "NUMBER"]]
        command "deleteKey", [[name: "ID*", type: "STRING"]]
    }

    preferences
    {
        section
        {
            input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
        }
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def initialize()
{
    atomicState.numDeletions = 0
    atomicState.needsReread = false
    sendEvent(name: "codeLength", value: 12)
    sendEvent(name: "maxCodes", value: 100)
    refresh()
}

def refresh()
{
    parent?.refreshFromParent(device)
}

def parse(body)
{
    if (logEnable)
        logDebug body

    if (atomicState.numDeletions > 0) atomicState.numDeletions--

    if (body.result == "success") {
        atomicState.needsReread = true
        if (body.eventName == "createKey")
            sendEvent(name: "codeChanged", value: "added")
        else if (body.eventName == "deleteKey")
            sendEvent(name: "codeChanged", value: "deleted")

        if (atomicState.numDeletions == 0) {
            atomicState.needsReread = false
            parent?.rereadDevices(device.getDeviceNetworkId())
        }
    }
    else sendEvent(name: "codeChanged", value: "failed")
}

def writeDeviceCommand(command, parameter = "default", commandType = "command")
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        getParent()?.writeDeviceCommand(id, command, parameter, commandType)
    }
}

def createKey(String name, String code, String type=PERMANENT, long startTime=0, long endTime=0) {
  Map params = ["name": name, "type": type, "password": code, "startTime": startTime, "endTime": endTime]
  writeDeviceCommand("createKey", params)
}

def deleteKey(String id) {
  writeDeviceCommand("deleteKey", ["id": id])
}

def readDeviceDetails(details) {
    atomicState.lockCodes = []
    def expiredCodes = []
    for (it in details?.keyList) {
        atomicState.lockCodes << ["id": it.id, "name": it.name, "code": it.password, "iv": it.iv]
        if (it.status == PASSCODE_EXPIRED)
            expiredCodes << it.id
    }

    sendEvent(name: "lockCodes", value: getCodes())

    if (!expiredCodes.isEmpty()) {
        cleanExpiredCodes(expiredCodes)
    }
}

def cleanExpiredCodes(expiredCodes) {
    atomicState.numDeletions = expiredCodes.size()
    for (code in expiredCodes) deleteKey(code)
}

def deleteCode(position) {
    if (position < atomicState.lockCodes.size() && atomicState.lockCodes[position])
        deleteKey(atomicState.lockCodes[position].id)
}

def setCodeLength() {
    // Not supported
}

def setCode(codeposition, pincode, name) {
    deleteCode(codeposition)
    createKey(name, pincode)
}

def getCodes() {
    def codes = []
    for (it in atomicState.lockCodes) {
        codes << ["id": it.id, "name": it.name, "code": parent?.decryptPasscode(it.iv, it.code)]
    }

    return new JsonBuilder(codes).toString()
}
